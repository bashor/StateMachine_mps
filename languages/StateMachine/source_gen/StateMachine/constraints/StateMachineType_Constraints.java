package StateMachine.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class StateMachineType_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_8s33qb_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:0ae029e2-bf1f-4298-8806-654127d69d45(StateMachine.constraints)", "5926053529034176460");

  public StateMachineType_Constraints() {
    super("StateMachine.structure.StateMachineType");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("stateMachine", new BaseReferenceConstraintsDescriptor("stateMachine", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), "StateMachine.structure.StateMachine");
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_8s33qb_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
